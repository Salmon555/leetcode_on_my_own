# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if not headA or not headB:
            return None
        l1,l2=headA,headB
        len1,len2=1,1
        while(l1.next!=None):
            l1=l1.next
            len1+=1
        while(l2.next!=None):
            l2=l2.next
            len2+=1
        if len1>=len2:
            n=len1-len2
            for i in range(0,n):
                headA=headA.next
            while(headA!=None):
                if headA==headB:
                    return headA
                headA=headA.next
                headB=headB.next
            return None
        else:
            n=len2-len1
            print(n)
            for i in range(0,n):
                headB=headB.next
            while(headA!=None and headB!=None):
                if headA==headB:
                    return headB
                headA=headA.next
                headB=headB.next
            return None
