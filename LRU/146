class LRUCache:

    def __init__(self, capacity: int):
        self.queue=[]
        self.dic={}
        self.capacity=capacity
        

    def get(self, key: int) -> int:
        if key not in self.queue:
            return -1
        else:
            self.queue.remove(key)
            self.queue.append(key)
            return self.dic[key]
        

    def put(self, key: int, value: int) -> None:
        if len(self.queue)<self.capacity:
            if key in self.dic.keys():
                self.dic[key]=value
                self.queue.remove(key)
                self.queue.append(key)
            else:
                self.dic[key]=value
                self.queue.append(key)
        else:
            if key in self.dic.keys():
                self.dic[key]=value
                self.queue.remove(key)
                self.queue.append(key)
            else:
                self.dic.pop(self.queue[0])
                self.queue.pop(0)
                self.queue.append(key)
                self.dic[key]=value
                
            


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
